einstein = cv.imread('/content/drive/MyDrive/a1images/einstein.png', cv.IMREAD_GRAYSCALE)
assert einstein is not None

def sobel_filter(image, sobel_x, sobel_y):
    h, w = image.shape  # dimensions of the image
    # Initializing output arrays
    output_x = np.zeros((h, w), dtype=np.float64)
    output_y = np.zeros((h, w), dtype=np.float64)
    # Performing convolution
    for i in range(1, h-1):
        for j in range(1, w-1):
            output_x[i, j] = np.sum(image[i-1:i+2, j-1:j+2] * sobel_x)
            output_y[i, j] = np.sum(image[i-1:i+2, j-1:j+2] * sobel_y)
    return output_x, output_y
# Plot results
sobel_x = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])
sobel_y = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
output_x, output_y = sobel_filter(einstein, sobel_x, sobel_y)
fig, ax = plt.subplots(1, 4, figsize=(20,5))

ax[0].imshow(output_x, cmap='gray')
ax[0].set_title('Sobel X')


ax[1].imshow(output_y, cmap='gray')
ax[1].set_title('Sobel Y')

import numpy as np
import cv2 as cv
sobel_y = np.array([1,2,1], dtype=np.float32) # kernel
sobel_x = np.array([1,0,-1], dtype=np.float32) # kernel
img_sobel_y = cv.sepFilter2D(einstein,cv.CV_64F,sobel_x, sobel_y) # apply kernel to image
img_sobel_x = cv.sepFilter2D(einstein,cv.CV_64F, sobel_y, sobel_x) # apply kernel to image

ax[2].imshow(img_sobel_y, cmap='gray')
ax[2].set_title('Sobel Y-custom function') # show sobel vertical image
ax[3].imshow(img_sobel_x, cmap='gray')
ax[3].set_title('Sobel X-custom function') # show sobel horizontal image
plt.show()

import numpy as np
import cv2 as cv
sobel_y = np.array([1,2,1], dtype=np.float32) # kernel
sobel_x = np.array([1,0,-1], dtype=np.float32) # kernel
img_sobel_y = cv.sepFilter2D(einstein,cv.CV_64F,sobel_x, sobel_y) # apply kernel to image
img_sobel_x = cv.sepFilter2D(einstein,cv.CV_64F, sobel_y, sobel_x) # apply kernel to image

fig, axes  = plt.subplots(1, 2, figsize=(10,5)) # create figure with 3 subplots
axes[0].imshow(img_sobel_y, cmap='gray')
axes[0].set_title('Sobel X') # show sobel vertical image
axes[1].imshow(img_sobel_x, cmap='gray')
axes[1].set_title('Sobel Y') # show sobel horizontal image
plt.show()
